{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n//GetFunds from users\n//Withdraw funds\n//Set a minimum funding value in USD\n\nimport \"./PriceConverter1.sol\";\n\ncontract FundMe {\n    //make it public bcoz we want everybody can call this function\n    //Want to be able to set a minimum fund amount in USD\n    //1. How do we send ETH to this contract\n    //keyword \"payable\" makes the button to red color\n\n    using PriceConverter1 for uint256;\n\n    uint256 public minimumUsd = 50 * 1e18; //1 * 10 ** 18\n\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    address public owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        owner = msg.sender; //where msg.sender is whomever deployed the contract\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        //\"require\" set minimum of price\n        //If first section below is false, then revert the error message followed by\n        //revert means undo any action before, and send remaining gas back\n        //number = 8;\n        //require(msg.value > 1e18, \"Didn't send enough!\"); //1e18 == 1 * 10 ** 18 == 1000000000000000000 == 1ETH\n        require(\n            msg.value.getConversionRate(priceFeed) >= minimumUsd,\n            \"Didn't send enough!\"\n        ); //1e18 == 1 * 10 ** 18 == 1000000000000000000 == 1ETH 18 decimals\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        //user modifier to make sure the ownership is checked before reading the content of the function\n        //require(msg.sender == owner, \"Sender is not the owner!\"); // == means checking two variables are equivilant\n        //for loop\n        //[1,2,3,4]\n        //0. 1. 2. 3. looping turn\n        /*starting index, ending index, step amount */\n        //e.g. 0, 10, 2 that means 0 2 4 6 8 10\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        //reset the array\n        funders = new address[](0); //reset to 0 as a brand new array\n        //actually withdraw the funds\n\n        //transfer\n\n        //msg.sender = address\n        //payable(msg.sender) = payable address\n        //payable (msg.sender).transfer(address(this).balance);  //keyword \"this\" means this whole contract\n\n        //send\n        //bool sendSuccess = payble(msg.sender).send(address(this).balance);\n        //require(sendSuccess, \"Send failed\");\n\n        //call\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\"); //can call other contracts' function\n        require(callSuccess, \"Call failed\");\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Sender is not the owner!\"); // == means checking two variables are equivilant\n        _; //_; means process the rest of code\n    }\n}\n"
    },
    "contracts/PriceConverter1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter1 {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    )\n        internal\n        view\n        returns (\n            uint256 // ABI\n        )\n    // Address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n    //AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e).version //call version function on the contract specified\n    //AggregatorV3Interface priceFeed = AggregatorV3Interface(\n    //    0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n    {\n        (, int256 answer, , , ) = priceFeed.latestRoundData(); //return whole bunch of variable of the lastestRoundData function under AggregatorV3Interface\n        //remove other variable to get only the price of ETH in terms of USD //3000.00000000\n        return uint256(answer * 1e10); //1**10 == 10000000000\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        //3000_000000000000000000 = ETH/ USD price\n        //1_000000000000000000 ETH\n        uint ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}